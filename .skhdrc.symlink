# #  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
# #                     be found at https://github.com/koekeishiya/skhd/issues/1
# #
# #                     A hotkey is written according to the following rules:
# #
# #                       hotkey   = <mode> '<' <action> | <action>
# #
# #                       mode     = 'name of mode' | <mode> ',' <mode>
# #
# #                       action   = <keysym> ':' <command> | <keysym> '->' ':' <command>
# #                                  <keysym> ';' <mode>    | <keysym> '->' ';' <mode>
# #
# #                       keysym   = <mod> '-' <key> | <key>
# #
# #                       mod      = 'built-in mod keyword' | <mod> '+' <mod>
# #
# #                       key      = <literal> | <keycode>
# #
# #                       literal  = 'single letter or built-in keyword'
# #
# #                       keycode  = 'apple keyboard kVK_<Key> values (0x3C)'
# #
# #                       ->       = keypress is not consumed by skhd
# #
# #                       command  = command is executed through '$SHELL -c' and
# #                                  follows valid shell syntax. if the $SHELL environment
# #                                  variable is not set, it will default to '/bin/bash'.
# #                                  when bash is used, the ';' delimeter can be specified
# #                                  to chain commands.
# #
# #                                  to allow a command to extend into multiple lines,
# #                                  prepend '\' at the end of the previous line.
# #
# #                                  an EOL character signifies the end of the bind.
# #
# #
# #  NOTE(koekeishiya): A mode is declared according to the following rules:
# #
# #                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
# #                                   '::' <name> '@'               | '::' <name>
# #
# #                       name      = desired name for this mode,
# #
# #                       @         = capture keypresses regardless of being bound to an action
# #
# #                       command  = command is executed through '$SHELL -c' and
# #                                  follows valid shell syntax. if the $SHELL environment
# #                                  variable is not set, it will default to '/bin/bash'.
# #                                  when bash is used, the ';' delimeter can be specified
# #                                  to chain commands.
# #
# #                                  to allow a command to extend into multiple lines,
# #                                  prepend '\' at the end of the previous line.
# #
# #                                  an EOL character signifies the end of the bind.

# # add an on_enter command to the default mode
# # :: default : chunkc border::color 0xff775759
# #
# # defines a new mode 'test' with an on_enter command, that captures keypresses
# # :: test @ : chunkc border::color 0xff24ccaa
# #
# # from 'default' mode, activate mode 'test'
# # cmd - x ; test
# #
# # from 'test' mode, activate mode 'default'
# # test < cmd - x ; default
# #
# # launch a new terminal instance when in either 'default' or 'test' mode
# # default, test < cmd - return : open -na /Applications/Terminal.app

# # open terminal, blazingly fast compared to iTerm/Hyper
# cmd - return : open -na /Applications/Kitty.app

# #
# # NOTE: You can do notifications with sounds: https://code-maven.com/display-notification-from-the-mac-command-line
# # NOTE: Sounds live in `/System/Library/Sounds`
# # NOTE: Full example for ideas: https://github.com/koekeishiya/skhd/blob/master/examples/skhdrc
# #

# ###########
# ### alt ###
# ###########

# # enter fullscreen mode for the focused container
# alt - f : chunkc tiling::window --toggle fullscreen
# # shift + alt - f : chunkc tiling::window --toggle native-fullscreen

# # Change tiling padding
# alt - w : chunkc tiling::desktop --toggle offset

# # change layout of desktop
# alt - e : chunkc tiling::desktop --mirror vertical
# alt - r : chunkc tiling::desktop --layout monocle
# alt - t : chunkc tiling::desktop --layout bsp
# alt - y : chunkc tiling::desktop --layout float
# # TODO: Docs
# alt - m : chunkc tiling::desktop --rotate 90

# # change focus
# alt - h : chunkc tiling::window --focus west
# alt - j : chunkc tiling::window --focus south
# alt - k : chunkc tiling::window --focus north
# alt - l : chunkc tiling::window --focus east

# # focus on desktop
# alt - tab : chunkc tiling::desktop --focus $(chunkc get _last_active_desktop)
# alt - p : chunkc tiling::desktop --focus prev
# alt - n : chunkc tiling::desktop --focus next
# alt - 1 : chunkc tiling::desktop --focus 1
# alt - 2 : chunkc tiling::desktop --focus 2
# alt - 3 : chunkc tiling::desktop --focus 3
# alt - 4 : chunkc tiling::desktop --focus 4
# alt - 5 : chunkc tiling::desktop --focus 5
# alt - 6 : chunkc tiling::desktop --focus 6
# alt - 7 : chunkc tiling::desktop --focus 7

# ###################
# ### shift + alt ###
# ###################

# # Check if running
# shift + alt - i : osascript -e 'display notification "⚠️ Hi!" with title "🔎 Chunkwm" sound name "Tink"';

# # reload chunkwm
# shift + alt - r : osascript -e 'display notification "⚠️ Reload️ing..." with title "🔎 Chunkwm" sound name "Tink"';\
#                   brew services restart chunkwm;\
#                   osascript -e 'display notification "♻️ Reloaded️" with title "🔎 Chunkwm" sound name "Pop"'

# # kill focused window
# shift + alt - q : chunkc tiling::window --close

# # change focus between tiling / floating windows
# shift + alt - space : chunkc tiling::window --toggle float

# # move focused window
# shift + alt - h : chunkc tiling::window --warp west
# shift + alt - j : chunkc tiling::window --warp south
# shift + alt - k : chunkc tiling::window --warp north
# shift + alt - l : chunkc tiling::window --warp east

# # send window to desktop and follow focus
# shift + alt - tab : chunkc tiling::window --send-to-desktop $(chunkc get _last_active_desktop);\
#                   chunkc tiling::desktop --focus $(chunkc get _last_active_desktop)
# shift + alt - p : chunkc tiling::window --send-to-desktop prev;\
#                   chunkc tiling::desktop --focus prev
# shift + alt - n : chunkc tiling::window --send-to-desktop next;\
#                   chunkc tiling::desktop --focus next
# shift + alt - 1 : chunkc tiling::window --send-to-desktop 1;\
#                   chunkc tiling::desktop --focus 1
# shift + alt - 2 : chunkc tiling::window --send-to-desktop 2;\
#                   chunkc tiling::desktop --focus 2
# shift + alt - 3 : chunkc tiling::window --send-to-desktop 3;\
#                   chunkc tiling::desktop --focus 3
# shift + alt - 4 : chunkc tiling::window --send-to-desktop 4;\
#                   chunkc tiling::desktop --focus 4
# shift + alt - 5 : chunkc tiling::window --send-to-desktop 5;\
#                   chunkc tiling::desktop --focus 5
# shift + alt - 6 : chunkc tiling::window --send-to-desktop 6;\
#                   chunkc tiling::desktop --focus 6
# shift + alt - 7 : chunkc tiling::window --send-to-desktop 7;\
#                   chunkc tiling::desktop --focus 7

# ##########################
# ### shift + alt + ctrl ###
# ##########################

# # resize windows
# # General docs: https://github.com/koekeishiya/chunkwm/blob/master/src/plugins/tiling/README.md#increase-region-size
# # Recipe: https://github.com/koekeishiya/chunkwm/wiki/Useful-tips-and-workarounds#resize-regions-similar-to-the-behavior-known-from-the-i3-window-manager
# shift + alt + ctrl - h : chunkc tiling::window --use-temporary-ratio 0.05 --adjust-window-edge west; chunkc tiling::window --use-temporary-ratio -0.05 --adjust-window-edge east
# shift + alt + ctrl - j : chunkc tiling::window --use-temporary-ratio 0.05 --adjust-window-edge south; chunkc tiling::window --use-temporary-ratio -0.05 --adjust-window-edge north
# shift + alt + ctrl - k : chunkc tiling::window --use-temporary-ratio 0.05 --adjust-window-edge north; chunkc tiling::window --use-temporary-ratio -0.05 --adjust-window-edge south
# shift + alt + ctrl - l : chunkc tiling::window --use-temporary-ratio 0.05 --adjust-window-edge east; chunkc tiling::window --use-temporary-ratio -0.05 --adjust-window-edge west

# # RJH Open up all apps
# shift + alt + ctrl - a : open -a Vivaldi;\
#                          open -a Visual\ Studio\ Code;\
#                          open -a Hyper;\
#                          open -a Slack;\
#                          open -a Messages;\
#                          open -a Goofy;\
#                          open -a YakYak;\
#                          open -a Spotify;\
#                          open -a Notion;\
#                          open -a Todoist;\
#                          open -a Mailspring;\
#                          open -a Fantastical\ 2;\
#                          open -a Google\ Chrome;\
#                          open -a Contacts\ Sync\ For\ Google\ Gmail;\
#                          open -a Dropbox;\
#                          open -a Synology\ Drive;\
#                          open -a Harvest;\

# ###################
# ### Experiments ###
# ###################

# # TODO: Allow for whitelist? chunkc tiling::query --window name
# # ctrl - h : chunkc tiling::window --focus west
# # ctrl - j : chunkc tiling::window --focus south
# # ctrl - k : chunkc tiling::window --focus north
# # ctrl - l : chunkc tiling::window --focus east

# # TODO: How to insert the output of the chunk command into the notification
# # shift + alt - k : osascript -e 'display notification "$(chunkc tiling::query --window owner)" with title "🔎 Chunkwm" sound name "Tink"';

# # TODO: Grid layout only works with floated windows and then you can't move around
# # `rows:cols:left:top:width:height`
# # split region to rows:cols grid, windows on left:top grid, have <width> times grid width and <height> times grid height
# # shift + alt + ctrl - q : chunkc tiling::window --grid-layout 1:3:1:1:1:1;\
# #                          osascript -e 'display notification "⚠️ Hi!" with title "🔎 Chunkwm" sound name "Tink"';

# shift + alt + ctrl - q : chunkc tiling::desktop --serialize /tmp/chunkwm-rjh;\
#                          osascript -e 'display notification "⚠️ Serialized!" with title "🔎 Chunkwm" sound name "Tink"';

# shift + alt + ctrl - w : chunkc tiling::desktop --deserialize /tmp/chunkwm-rjh;\
#                          osascript -e 'display notification "⚠️ Deserialized!" with title "🔎 Chunkwm" sound name "Tink"';

# open terminal
ctrl + cmd - return : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~

# focus window
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east

# swap window
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east

# move window
shift + cmd - h : yabai -m window --warp west
shift + cmd - j : yabai -m window --warp south
shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east

# balance size of windows
shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# make floating window fill right-half of screen
shift + alt - right  : yabai -m window --grid 1:2:1:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
shift + cmd - n : yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                  yabai -m window --space "${index}" && \
                  yabai -m space --focus "${index}"

# create desktop and follow focus - uses jq for parsing json (brew install jq)
cmd + alt - n : yabai -m space --create && \
                index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                yabai -m space --focus "${index}"

# destroy desktop
cmd + alt - w : yabai -m space --destroy

# fast focus desktop
cmd + alt - x : yabai -m space --focus recent
cmd + alt - z : yabai -m space --focus prev
cmd + alt - c : yabai -m space --focus next
cmd + alt - 1 : yabai -m space --focus 1
cmd + alt - 2 : yabai -m space --focus 2
cmd + alt - 3 : yabai -m space --focus 3
cmd + alt - 4 : yabai -m space --focus 4
cmd + alt - 5 : yabai -m space --focus 5
cmd + alt - 6 : yabai -m space --focus 6
cmd + alt - 7 : yabai -m space --focus 7
cmd + alt - 8 : yabai -m space --focus 8
cmd + alt - 9 : yabai -m space --focus 9
cmd + alt - 0 : yabai -m space --focus 10

# send window to desktop and follow focus
shift + alt - x : yabai -m window --space recent; yabai -m space --focus recent
shift + alt - z : yabai -m window --space prev; yabai -m space --focus prev
shift + alt - c : yabai -m window --space next; yabai -m space --focus next
shift + alt - 1 : yabai -m window --space  1; yabai -m space --focus 1
shift + alt - 2 : yabai -m window --space  2; yabai -m space --focus 2
shift + alt - 3 : yabai -m window --space  3; yabai -m space --focus 3
shift + alt - 4 : yabai -m window --space  4; yabai -m space --focus 4
shift + alt - 5 : yabai -m window --space  5; yabai -m space --focus 5
shift + alt - 6 : yabai -m window --space  6; yabai -m space --focus 6
shift + alt - 7 : yabai -m window --space  7; yabai -m space --focus 7
shift + alt - 8 : yabai -m window --space  8; yabai -m space --focus 8
shift + alt - 9 : yabai -m window --space  9; yabai -m space --focus 9
shift + alt - 0 : yabai -m window --space 10; yabai -m space --focus 10

# focus monitor
ctrl + alt - x  : yabai -m display --focus recent
ctrl + alt - z  : yabai -m display --focus prev
ctrl + alt - c  : yabai -m display --focus next
ctrl + alt - 1  : yabai -m display --focus 1
ctrl + alt - 2  : yabai -m display --focus 2
ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
ctrl + cmd - x  : yabai -m window --display recent; yabai -m display --focus recent
ctrl + cmd - z  : yabai -m window --display prev; yabai -m display --focus prev
ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1
ctrl + cmd - 2  : yabai -m window --display 2; yabai -m display --focus 2
ctrl + cmd - 3  : yabai -m window --display 3; yabai -m display --focus 3

# move window
shift + ctrl - a : yabai -m window --move rel:-20:0
shift + ctrl - s : yabai -m window --move rel:0:20
shift + ctrl - w : yabai -m window --move rel:0:-20
shift + ctrl - d : yabai -m window --move rel:20:0

# increase window size
shift + alt - a : yabai -m window --resize left:-20:0
shift + alt - s : yabai -m window --resize bottom:0:20
shift + alt - w : yabai -m window --resize top:0:-20
shift + alt - d : yabai -m window --resize right:20:0

# decrease window size
shift + cmd - a : yabai -m window --resize left:20:0
shift + cmd - s : yabai -m window --resize bottom:0:-20
shift + cmd - w : yabai -m window --resize top:0:20
shift + cmd - d : yabai -m window --resize right:-20:0

# set insertion point in focused container
ctrl + alt - h : yabai -m window --insert west
ctrl + alt - j : yabai -m window --insert south
ctrl + alt - k : yabai -m window --insert north
ctrl + alt - l : yabai -m window --insert east

# rotate tree
alt - r : yabai -m space --rotate 90

# mirror tree y-axis
alt - y : yabai -m space --mirror y-axis

# mirror tree x-axis
alt - x : yabai -m space --mirror x-axis

# toggle desktop offset
alt - a : yabai -m space --toggle padding; yabai -m space --toggle gap

# toggle window parent zoom
alt - d : yabai -m window --toggle zoom-parent

# toggle window fullscreen zoom
alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window native fullscreen
shift + alt - f : yabai -m window --toggle native-fullscreen

# toggle window border
shift + alt - b : yabai -m window --toggle border

# toggle window split type
alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle sticky
alt - s : yabai -m window --toggle sticky

# toggle sticky, float and resize to picture-in-picture size
alt - p : yabai -m window --toggle sticky;\
          yabai -m window --grid 5:5:4:0:1:1

# change layout of desktop
ctrl + alt - a : yabai -m space --layout bsp
ctrl + alt - d : yabai -m space --layout float
